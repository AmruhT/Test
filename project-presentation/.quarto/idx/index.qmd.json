{"title":"Progress Presentation","markdown":{"yaml":{"title":"Progress Presentation","author":"Spotify Surfers","format":"revealjs"},"headingText":"PROJECT Roadmap","containsRefs":false,"markdown":"\n\n\n::: {.fragment .fade-in}\n![](mini/DiagramProgress.png){.absolute top=\"150\" left=\"0\" width=150%}\n:::\n---\n\n## Using Spotify API Pt.1\n::: {.fragment .fade-in}\nBelow is a function to **request** a token: \n\n``` r\n# Request Access Token\ndef get_token():\n    authString = clientID + \":\" + clientSecret\n    authBytes = authString.encode(\"utf-8\")\n    authBase64 = str(base64.b64encode(authBytes), \"utf-8\")\n\n    url = 'https://accounts.spotify.com/api/token'\n    headers = {\n                'Authorization': 'Basic ' + authBase64,\n                'Content-type': 'application/x-www-form-urlencoded'\n              }\n    data = {'grant_type': 'client_credentials'}\n\n    result = requests.post(url, headers = headers, data = data)\n    json_result = json.loads(result.content)\n\n    return json_result[\"access_token\"]\n```\n:::\n\n---\n\n## Using Spotify API Pt.2\n\n::: {.fragment .fade-in}\nBelow is a function to **get all tracks** in a playlist:\n\n``` r\n# Format Authorisation Header\ndef getAuthorisationHeader(token):\n  return {\"Authorization\": \"Bearer \" + token}\n\n# Get Playlist Data\ndef parsePlaylist(playlist_name, token):\n  # Search for the playlist ID by name\n  search_url = f'https://api.spotify.com/v1/search?q={playlist_name}&type=playlist'\n  headers = getAuthorisationHeader(token)\n  search_response = requests.get(search_url, headers=headers)\n        \n  # Get playlist ID of closest match\n  playlist_id = closest_match['id']\n  \n  # Retrieve playlist tracks using the playlist ID\n  playlist_tracks_url = f'https://api.spotify.com/v1/playlists/{playlist_id}/tracks'\n  playlist_tracks_response = requests.get(playlist_tracks_url, \n  headers=headers)\n```\n:::\n\n---\n\n## Experimenting with Spotify API - Pt.1\n\n::: incremental\n-   Started by setting **seed** genre to **Jazz**\n-   Used **Spotify API** to access the genre\n-   Printed 10 random **Jazz** songs\n\n::: {.fragment .fade-in}\n``` r\ngenre = 'jazz' \n\n# Getting songs for specified genre - Jazz\nrecommendations = sp.recommendations(seed_genres=[genre], limit=10)\n\nfor track in recommendations['tracks']:\n    print(track['name'], '-', track['artists'][0]['name'])\n```\n:::\n:::\n---\n\n## Experimenting with Spotify API - Pt.2\n\n::: incremental\n-   Started by setting **seed** genre to **Pop**\n-   Used Spotify's **\"popularity score\"** metric to gauge most popular songs in the genre\n-   Score depends on the **total number** + **recency** of plays\n\n::: {.fragment .fade-in}\n``` r\ngenre = 'pop' \n\n# Sorting songs by popularity + getting Top 10\nrecommendations = sp.recommendations(seed_genres=[genre], limit=50)  \ntracks = sorted(recommendations['tracks'], key=lambda x: x['popularity'],\nreverse=True)\ntracks = tracks[:10]\n\n# Displaying the most popular songs that fit the genre criteria\nfor track in tracks:\n    print(f\"{track['name']} by {track['artists'][0]['name']} - Popularity: {track['popularity']}\")\n```\n:::\n:::\n\n---\n\n## Experimenting with Spotify API - Pt.3\n\n::: incremental\n-   Started by accessing **\"Today's Top Hits\"** playlist for today\n-   **Count** no. times each artist appears + **sort** in ascending order\n-   Note: list depends on if artist **recently** released any music\n\n::: {.fragment .fade-in}\n``` r\n# Today's Top Hits Playlist\ntop_tracks = sp.playlist_tracks('37i9dQZEVXbMDoHDwVN2tF', market='GB')\n\n# Extract artists from these tracks\nartists = {}\nfor track in top_tracks['items']:\n    if track['track'] is not None:\n        for artist in track['track']['artists']:\n            artists[artist['name']] = artists.get(artist['name'], 0) + 1\n\n# Sort artists by their appearance count\nsorted_artists = sorted(artists.items(), key=lambda x: x[1], reverse=True)\n```\n:::\n:::\n---\n\n## Visualising some Data - Pt.1\n\n::: {.fragment .fade-in}\nBelow is a function to **clean** + **format** the data into a df:\n\n``` r\ndef get_name_counts(artist_names):\n  name_counts = Counter(artist_names)\n  ten_names = name_counts.most_common(10)\n  occur = {name: count for name, count in ten_names}\n  \n  df = pd.DataFrame.from_dict(occur, orient='index', columns=['occurences']\n  ).reset_index()\n  return df.rename(columns={'index': 'artist'})\n```\n:::\n::: {.fragment .fade-in}\nBelow is a function to **plot** the data using the **ggplot** lib:\n\n\n``` r\ndef create_plot(df):\n  p = (\n      ggplot(df, aes(x='artist', y='occurences')) +\n      geom_bar(stat='identity', fill='skyblue') +\n      theme(axis_text_x=element_text(angle=45,hjust=1)) +\n      labs(x='Artist', y='Occurrences', title='Top 10 Most Common Artists')\n      )\n  return p\n```\n:::\n---\n\n## Visualising some Data - Pt.2\n\n::: incremental\n\n-   Aim is to gather info on which artists are most frequently featured in **\"Featured\"** playlists\n-   Gathered data, formatted into a df and then used **plotnine** to graph it\n-   This provides a **basis** to form recommendations using **mainstream** artists \n:::\n::: {.fragment .fade-in}\nThe **plot** is shown on the next slide\n:::\n\n---\n\n## Visualising some Data - Pt.3 {auto-animate=\"true\"}\n\n::: {.fragment .fade-in}\n\n![](mini/Artists-Featured.png){.absolute top=\"92\" left=\"0\" width=\"1280\" height=\"960\"}\n:::\n\n## Visualising some Data - Pt.4\n\n::: incremental\n-   Aim is to gather info on **10 most commonly appearing artists** in a given playlist\n-   Gathered data, formatted into a df and used **plotnine** to graph it\n-   We can use this to compare **overlaps** in artists to calculate a **\"similarity score\"**\n:::\n\n::: {.fragment .fade-in}\nThe **plot** is shown on the next slide\n:::\n\n---\n\n## Visualising some Data - Pt.5 {auto-animate=\"true\"}\n\n::: {.fragment .fade-in}\n\n![](mini/Artists.png){.absolute top=\"92\" left=\"0\" width=\"1280\" height=\"960\"}\n:::\n---\n\n## Challenges so Far...\n\n::: {.fragment .fade-in}\nWe faced some **challenges** in setting this up:\n:::\n\n::: incremental\n-   Some artists were labelled as 'Various Artists'\n-   Indexing multiple layers + learning **API** controls\n:::\n::: {.fragment .fade-in}\nHowever, writing **functions** will help generalise further processes\n:::\n\n---\n\n## Elementary Web-Scraping Pt.1\n\n::: incremental\n\n-   Started by finding **table** of most similar songs\n-   Iterate over first 10 elements to get genre **name** and **link**\n-   Form a **list** of similar genres with playlist name\n\n::: {.fragment .fade-in}\n``` r\nsimilarGenres = []\n\nrows = sel.css('tr')[1:11]\n# Loop through first 10 rows\nfor row in rows:\n    name = row.css('td.note a::text').get()\n    link = row.css('td.note a::attr(href)').get()\n    playlistName = getPlaylistName(name)\n    similarGenres.append([name,link, playlistName])\n```\n:::\n:::\n\n---\n\n## Elementary Web-Scraping Pt.2\n\n::: incremental\n-   Load in **credentials** and make **token request**\n-   Add song genre and all tracks in playlist as **key pair** entry\n-   **Note**: functions used below were defined previously\n\n::: {.fragment .fade-in}\n``` r\nwith open('credentials.json','r') as file:\n    credentials = json.load(file)\n\nclientID = credentials[\"Client-ID\"]\nclientSecret = credentials[\"Client-Secret\"]\n\ntoken = get_token()\n\nsongs = {}\nfor genre in similarGenres:\n    songs[genre[0]] = parsePlaylist(genre[2], token)\n```\n:::\n:::\n\n---\n\n## More Challenges!!!\n\n::: {.fragment .fade-in}\nWe faced more **challenges** in setting this up:\n:::\n\n::: incremental\n-   Playlists used were 'Songs by xxx' by **EveryNoise**\n-   Some playlists did not return a valid id - **None** object\n-   As a result, we could not form the df in time for today's presentation\n:::\n::: {.fragment .fade-in}\nShould be an easy fix by **replacing** missing playlists with next in similarity\n:::\n","srcMarkdownNoYaml":"\n\n## PROJECT Roadmap\n\n::: {.fragment .fade-in}\n![](mini/DiagramProgress.png){.absolute top=\"150\" left=\"0\" width=150%}\n:::\n---\n\n## Using Spotify API Pt.1\n::: {.fragment .fade-in}\nBelow is a function to **request** a token: \n\n``` r\n# Request Access Token\ndef get_token():\n    authString = clientID + \":\" + clientSecret\n    authBytes = authString.encode(\"utf-8\")\n    authBase64 = str(base64.b64encode(authBytes), \"utf-8\")\n\n    url = 'https://accounts.spotify.com/api/token'\n    headers = {\n                'Authorization': 'Basic ' + authBase64,\n                'Content-type': 'application/x-www-form-urlencoded'\n              }\n    data = {'grant_type': 'client_credentials'}\n\n    result = requests.post(url, headers = headers, data = data)\n    json_result = json.loads(result.content)\n\n    return json_result[\"access_token\"]\n```\n:::\n\n---\n\n## Using Spotify API Pt.2\n\n::: {.fragment .fade-in}\nBelow is a function to **get all tracks** in a playlist:\n\n``` r\n# Format Authorisation Header\ndef getAuthorisationHeader(token):\n  return {\"Authorization\": \"Bearer \" + token}\n\n# Get Playlist Data\ndef parsePlaylist(playlist_name, token):\n  # Search for the playlist ID by name\n  search_url = f'https://api.spotify.com/v1/search?q={playlist_name}&type=playlist'\n  headers = getAuthorisationHeader(token)\n  search_response = requests.get(search_url, headers=headers)\n        \n  # Get playlist ID of closest match\n  playlist_id = closest_match['id']\n  \n  # Retrieve playlist tracks using the playlist ID\n  playlist_tracks_url = f'https://api.spotify.com/v1/playlists/{playlist_id}/tracks'\n  playlist_tracks_response = requests.get(playlist_tracks_url, \n  headers=headers)\n```\n:::\n\n---\n\n## Experimenting with Spotify API - Pt.1\n\n::: incremental\n-   Started by setting **seed** genre to **Jazz**\n-   Used **Spotify API** to access the genre\n-   Printed 10 random **Jazz** songs\n\n::: {.fragment .fade-in}\n``` r\ngenre = 'jazz' \n\n# Getting songs for specified genre - Jazz\nrecommendations = sp.recommendations(seed_genres=[genre], limit=10)\n\nfor track in recommendations['tracks']:\n    print(track['name'], '-', track['artists'][0]['name'])\n```\n:::\n:::\n---\n\n## Experimenting with Spotify API - Pt.2\n\n::: incremental\n-   Started by setting **seed** genre to **Pop**\n-   Used Spotify's **\"popularity score\"** metric to gauge most popular songs in the genre\n-   Score depends on the **total number** + **recency** of plays\n\n::: {.fragment .fade-in}\n``` r\ngenre = 'pop' \n\n# Sorting songs by popularity + getting Top 10\nrecommendations = sp.recommendations(seed_genres=[genre], limit=50)  \ntracks = sorted(recommendations['tracks'], key=lambda x: x['popularity'],\nreverse=True)\ntracks = tracks[:10]\n\n# Displaying the most popular songs that fit the genre criteria\nfor track in tracks:\n    print(f\"{track['name']} by {track['artists'][0]['name']} - Popularity: {track['popularity']}\")\n```\n:::\n:::\n\n---\n\n## Experimenting with Spotify API - Pt.3\n\n::: incremental\n-   Started by accessing **\"Today's Top Hits\"** playlist for today\n-   **Count** no. times each artist appears + **sort** in ascending order\n-   Note: list depends on if artist **recently** released any music\n\n::: {.fragment .fade-in}\n``` r\n# Today's Top Hits Playlist\ntop_tracks = sp.playlist_tracks('37i9dQZEVXbMDoHDwVN2tF', market='GB')\n\n# Extract artists from these tracks\nartists = {}\nfor track in top_tracks['items']:\n    if track['track'] is not None:\n        for artist in track['track']['artists']:\n            artists[artist['name']] = artists.get(artist['name'], 0) + 1\n\n# Sort artists by their appearance count\nsorted_artists = sorted(artists.items(), key=lambda x: x[1], reverse=True)\n```\n:::\n:::\n---\n\n## Visualising some Data - Pt.1\n\n::: {.fragment .fade-in}\nBelow is a function to **clean** + **format** the data into a df:\n\n``` r\ndef get_name_counts(artist_names):\n  name_counts = Counter(artist_names)\n  ten_names = name_counts.most_common(10)\n  occur = {name: count for name, count in ten_names}\n  \n  df = pd.DataFrame.from_dict(occur, orient='index', columns=['occurences']\n  ).reset_index()\n  return df.rename(columns={'index': 'artist'})\n```\n:::\n::: {.fragment .fade-in}\nBelow is a function to **plot** the data using the **ggplot** lib:\n\n\n``` r\ndef create_plot(df):\n  p = (\n      ggplot(df, aes(x='artist', y='occurences')) +\n      geom_bar(stat='identity', fill='skyblue') +\n      theme(axis_text_x=element_text(angle=45,hjust=1)) +\n      labs(x='Artist', y='Occurrences', title='Top 10 Most Common Artists')\n      )\n  return p\n```\n:::\n---\n\n## Visualising some Data - Pt.2\n\n::: incremental\n\n-   Aim is to gather info on which artists are most frequently featured in **\"Featured\"** playlists\n-   Gathered data, formatted into a df and then used **plotnine** to graph it\n-   This provides a **basis** to form recommendations using **mainstream** artists \n:::\n::: {.fragment .fade-in}\nThe **plot** is shown on the next slide\n:::\n\n---\n\n## Visualising some Data - Pt.3 {auto-animate=\"true\"}\n\n::: {.fragment .fade-in}\n\n![](mini/Artists-Featured.png){.absolute top=\"92\" left=\"0\" width=\"1280\" height=\"960\"}\n:::\n\n## Visualising some Data - Pt.4\n\n::: incremental\n-   Aim is to gather info on **10 most commonly appearing artists** in a given playlist\n-   Gathered data, formatted into a df and used **plotnine** to graph it\n-   We can use this to compare **overlaps** in artists to calculate a **\"similarity score\"**\n:::\n\n::: {.fragment .fade-in}\nThe **plot** is shown on the next slide\n:::\n\n---\n\n## Visualising some Data - Pt.5 {auto-animate=\"true\"}\n\n::: {.fragment .fade-in}\n\n![](mini/Artists.png){.absolute top=\"92\" left=\"0\" width=\"1280\" height=\"960\"}\n:::\n---\n\n## Challenges so Far...\n\n::: {.fragment .fade-in}\nWe faced some **challenges** in setting this up:\n:::\n\n::: incremental\n-   Some artists were labelled as 'Various Artists'\n-   Indexing multiple layers + learning **API** controls\n:::\n::: {.fragment .fade-in}\nHowever, writing **functions** will help generalise further processes\n:::\n\n---\n\n## Elementary Web-Scraping Pt.1\n\n::: incremental\n\n-   Started by finding **table** of most similar songs\n-   Iterate over first 10 elements to get genre **name** and **link**\n-   Form a **list** of similar genres with playlist name\n\n::: {.fragment .fade-in}\n``` r\nsimilarGenres = []\n\nrows = sel.css('tr')[1:11]\n# Loop through first 10 rows\nfor row in rows:\n    name = row.css('td.note a::text').get()\n    link = row.css('td.note a::attr(href)').get()\n    playlistName = getPlaylistName(name)\n    similarGenres.append([name,link, playlistName])\n```\n:::\n:::\n\n---\n\n## Elementary Web-Scraping Pt.2\n\n::: incremental\n-   Load in **credentials** and make **token request**\n-   Add song genre and all tracks in playlist as **key pair** entry\n-   **Note**: functions used below were defined previously\n\n::: {.fragment .fade-in}\n``` r\nwith open('credentials.json','r') as file:\n    credentials = json.load(file)\n\nclientID = credentials[\"Client-ID\"]\nclientSecret = credentials[\"Client-Secret\"]\n\ntoken = get_token()\n\nsongs = {}\nfor genre in similarGenres:\n    songs[genre[0]] = parsePlaylist(genre[2], token)\n```\n:::\n:::\n\n---\n\n## More Challenges!!!\n\n::: {.fragment .fade-in}\nWe faced more **challenges** in setting this up:\n:::\n\n::: incremental\n-   Playlists used were 'Songs by xxx' by **EveryNoise**\n-   Some playlists did not return a valid id - **None** object\n-   As a result, we could not form the df in time for today's presentation\n:::\n::: {.fragment .fade-in}\nShould be an easy fix by **replacing** missing playlists with next in similarity\n:::\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.4.551","auto-stretch":true,"editor":"visual","title":"Progress Presentation","author":"Spotify Surfers"}}},"projectFormats":["html","revealjs"]}